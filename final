<!DOCTYPE html>
<meta charset="UTF-8">
<html>
<head>
<title>Ross Hitchcock</title>
<style>
  body {background-color: #11EEEE;}
label {white-space: pre;margin-left: 25px;}
</style>
<script type="x-shader/x-vertex" id="vshader-source">
attribute vec3 a_coords;attribute vec3 a_normal;uniform mat4 modelview;uniform mat4 projection;varying vec3 v_normal;varying vec3 v_eyeCoords;
void main() {vec4 coords = vec4(a_coords,1.0);vec4 eyeCoords = modelview * coords;gl_Position = projection * eyeCoords;v_normal = normalize(a_normal);
v_eyeCoords = eyeCoords.xyz/eyeCoords.w;}
</script>
<script type="x-shader/x-fragment" id="fshader-source">
    #ifdef GL_FRAGMENT_PRECISION_HIGH
       precision highp float;
    #else
       precision mediump float;
    #endif
    struct MaterialProperties {vec4 diffuseColor;  vec3 specularColor;vec3 emissiveColor;float specularExponent;};
struct LightProperties {bool enabled;vec4 position;vec3 color;float attenuation; vec3 spotDirection; float spotCosineCutoff;float spotExponent;};
    uniform MaterialProperties material;
    uniform LightProperties lights[4];
    uniform mat3 normalMatrix;
    varying vec3 v_normal;
    varying vec3 v_eyeCoords;
    vec3 lightingEquation( LightProperties light, MaterialProperties material, vec3 eyeCoords, vec3 N, vec3 V ) {
vec3 L, R;
        float spotFactor = 1.0; 
        float attenuationFactor = 4.25;
        if ( light.position.w == 0.0 ) {L = normalize( light.position.xyz );}
        else {L = normalize( light.position.xyz/light.position.w - v_eyeCoords );
            if (light.spotCosineCutoff > 0.0) {vec3 D = -normalize(light.spotDirection);float spotCosine = dot(D,L);
                if (spotCosine >= light.spotCosineCutoff) {spotFactor = pow(spotCosine,light.spotExponent);}
                else {spotFactor = 0.0; }}
            if (light.attenuation > 0.0) {float dist = distance(eyeCoords,light.position.xyz/light.position.w);attenuationFactor = 1.0 / (1.0 + dist*light.attenuation);}}
        if (dot(L,N) <= 0.0) {return vec3(0.0);}
        vec3 reflection = dot(L,N) * light.color * material.diffuseColor.rgb;
        R = -reflect(L,N);
        if (dot(R,V) > 0.0) {float factor = pow(dot(R,V),material.specularExponent);reflection += factor * material.specularColor * light.color;}
return spotFactor*attenuationFactor*reflection;}
void main() {vec3 normal = normalize( normalMatrix*v_normal );vec3 viewDirection = normalize( -v_eyeCoords);  vec3 color = material.emissiveColor;
for (int i = 0; i < 4; i++) {if (lights[i].enabled) {if (gl_FrontFacing) {color += lightingEquation( lights[i], material, v_eyeCoords,normal, viewDirection);}
else {color += lightingEquation( lights[i], material, v_eyeCoords,-normal, viewDirection);}}}gl_FragColor = vec4(color,material.diffuseColor.a);}
</script>
<script src="gl-matrix-min.js"></script>
<script src="trackball-rotator.js"></script>
<script src="basic-object-models-IFS.js"></script>
<script>
"use strict";
var gl;  
var a_coords_loc;     
var a_normal_loc;      
var u_modelview;  
var u_projection;
var u_normalMatrix;
var u_material;   
var u_lights;   
var modelview;        
var rotator;
var frameNumber = 0;  
var torus, sphere, cone, cylinder, disk, ring, cube;
var matrixStack = [];        
var currentColor = [1,1,1,1]; 
var sunAngle = Math.PI/4; 
var normalMatrix = mat3.create();  
var projection = mat4.create();  
var daytime = true;
var radius;
var modifier;
//--------------------------------------------//--------------------------------------------
function draw() {
gl.clearColor(0,0,0,1);
gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
mat4.perspective(projection,sunAngle, 1, 1, 70);
gl.uniformMatrix4fv(u_projection, false, projection );
modelview = rotator.getViewMatrix();
lights();
lights2();
lights3();
prawn();
for(var h=20;h>0;h--){
var x=h*Math.random();
var y=h*Math.random();
var z=h*Math.random();
mat4.translate(modelview,modelview,[x,y,z]);
other();}}
//--------------------------------------------//--------------------------------------------



//--------------------------------------------//--------------------------------------------
function prawn(){
pushMatrix();
mat4.rotateZ(modelview,modelview,sunAngle);
for(var ct=12;ct>0;ct--){
var x=Math.random();
var y=Math.random();
var z=Math.random();
mat4.translate(modelview,modelview,[x,y,z]);
mat4.scale(modelview,modelview,[y,z,x]);
cube.render();}
popMatrix();}

//--------------------------------------------//--------------------------------------------
function setSpotlightDirection(u_direction_loc,modelview,lightDirection ) {
mat3.normalFromMat4(normalMatrix,modelview);var transformedDirection = new Float32Array(3);vec3.transformMat3(transformedDirection, lightDirection, normalMatrix);
gl.uniform3fv(u_direction_loc, transformedDirection);}

//--------------------------------------------------------------------------------
function setLightPosition( u_position_loc, modelview, lightPosition ) {
var transformedPosition = new Float32Array(4);vec4.transformMat4(transformedPosition, lightPosition, modelview);gl.uniform4fv(u_position_loc, transformedPosition);}

//--------------------------------------------------------------------------------

function lights() {
if (daytime) {gl.uniform3f( u_lights[1].color, 0.6, 0.6, 0.5 );gl.uniform1f( u_lights[1].attenuation, 0 );}
else {gl.uniform3f( u_lights[1].color, 1, 1, 0.8 ); gl.uniform1f( u_lights[1].attenuation, 2 );} currentColor = [ 0.3, 0.3, 0.3, 1 ];

    pushMatrix(); 
    mat4.rotateZ(modelview,modelview,sunAngle);
    mat4.translate(modelview,modelview,[6.5,0,0]);
    mat4.scale(modelview,modelview,[0.4,0.4,0.4]);
    if (daytime) { gl.uniform3f( u_material.emissiveColor, 0.7, 0.7, 0 );setLightPosition(u_lights[1].position, modelview, [1,0,0,0]);}
    else {gl.uniform3f(u_material.emissiveColor, 0.1, 0.1, 0.1 );}
    cube.render();
    gl.uniform3f( u_material.emissiveColor, 0, 0, 0 );
    popMatrix();
    pushMatrix(); 
    mat4.translate(modelview,modelview,[0,1.5,0]);
    mat4.scale(modelview,modelview,[0.15,0.15,0.15]);
    if (!daytime) {setLightPosition(u_lights[1].position, modelview, [0,0,0,1]);gl.uniform3f( u_material.emissiveColor, 0.5, 0.5, 0 );}
    cube.render();
    gl.uniform3f( u_material.emissiveColor, 0, 0, 0 );
    popMatrix();
    if (daytime) {gl.uniform1f( u_lights[2].enabled, 0 );gl.uniform1f( u_lights[3].enabled, 0 );}
    else {gl.uniform1f( u_lights[2].enabled, 1 );gl.uniform1f( u_lights[3].enabled, 1 );

pushMatrix();
mat4.rotate(modelview,modelview,(-frameNumber)/180*Math.PI,[ 0, 1, 0]);
mat4.translate(modelview,modelview,[0,0.3,4]);
mat4.scale(modelview,modelview,[0.3,0.3,.3]);

pushMatrix();
mat4.translate(modelview,modelview,[-3,0.6,-1]);
mat4.rotateY(modelview,modelview,-Math.PI/12);  
setLightPosition(u_lights[2].position, modelview, [0,0,0,1]);
setSpotlightDirection(u_lights[2].spotDirection, modelview, [-1,0,0]);
popMatrix();
pushMatrix();
mat4.translate(modelview,modelview,[-3,0.6,1]);
mat4.rotateY(modelview,modelview,-Math.PI/12);
setLightPosition(u_lights[3].position, modelview, [0,0,0,1]);
setSpotlightDirection(u_lights[3].spotDirection, modelview, [-1,0,0]);
popMatrix();       
popMatrix();

    }
}

//--------------------------------------------------------------------------------
function lights2() {
if (daytime) {gl.uniform3f( u_lights[1].color, 0.6, 0.6, 0.5 );gl.uniform1f( u_lights[1].attenuation, 0 );}
else {gl.uniform3f( u_lights[1].color, 1, 1, 0.8 ); gl.uniform1f( u_lights[1].attenuation, 2 );} currentColor = [ 0.3, 0.3, 0.3, 1 ];

    pushMatrix(); 
    mat4.rotateZ(modelview,modelview,sunAngle);
    mat4.translate(modelview,modelview,[2.5,-5,0]);
    mat4.scale(modelview,modelview,[0.4,0.4,0.4]);
    if (daytime) { gl.uniform3f( u_material.emissiveColor, 0.7, 0.7, 0 );setLightPosition(u_lights[1].position, modelview, [1,0,0,0]);}
    else {gl.uniform3f(u_material.emissiveColor, 0.1, 0.1, 0.1 );}
    cube.render();
    gl.uniform3f( u_material.emissiveColor, 0, 0, 0 );
    popMatrix();
    pushMatrix(); 
    mat4.translate(modelview,modelview,[0,1.5,0]);
    mat4.scale(modelview,modelview,[0.15,0.15,0.15]);
    if (!daytime) {setLightPosition(u_lights[1].position, modelview, [0,0,0,1]);gl.uniform3f( u_material.emissiveColor, 0.5, 0.5, 0 );}
    cube.render();
    gl.uniform3f( u_material.emissiveColor, 0, 0, 0 );
    popMatrix();
    if (daytime) {gl.uniform1f( u_lights[2].enabled, 0 );gl.uniform1f( u_lights[3].enabled, 0 );}
    else {gl.uniform1f( u_lights[2].enabled, 1 );gl.uniform1f( u_lights[3].enabled, 1 );

pushMatrix();
mat4.rotate(modelview,modelview,(-frameNumber)/180*Math.PI,[ 0, 1, 0]);
mat4.translate(modelview,modelview,[0,0.3,4]);
mat4.scale(modelview,modelview,[0.3,0.3,.3]);

pushMatrix();
mat4.translate(modelview,modelview,[-3,0.6,-1]);
mat4.rotateY(modelview,modelview,-Math.PI/12);  
setLightPosition(u_lights[2].position, modelview, [0,0,0,1]);
setSpotlightDirection(u_lights[2].spotDirection, modelview, [-1,0,0]);
popMatrix();
pushMatrix();
mat4.translate(modelview,modelview,[-3,0.6,1]);
mat4.rotateY(modelview,modelview,-Math.PI/12);
setLightPosition(u_lights[3].position, modelview, [0,0,0,1]);
setSpotlightDirection(u_lights[3].spotDirection, modelview, [-1,0,0]);
popMatrix();       
popMatrix();

    }
}
//--------------------------------------------------------------------------------
function lights3() {
if (daytime) {gl.uniform3f( u_lights[1].color, 0.6, 0.6, 0.5 );gl.uniform1f( u_lights[1].attenuation, 0 );}
else {gl.uniform3f( u_lights[1].color, 1, 1, 0.8 ); gl.uniform1f( u_lights[1].attenuation, 2 );} currentColor = [ 0.3, 0.3, 0.3, 1 ];

    pushMatrix(); 
    mat4.rotateZ(modelview,modelview,sunAngle);
    mat4.translate(modelview,modelview,[2.5,5,0]);
    mat4.scale(modelview,modelview,[0.4,0.4,0.4]);
    if (daytime) { gl.uniform3f( u_material.emissiveColor, 0.7, 0.7, 0 );setLightPosition(u_lights[1].position, modelview, [1,0,0,0]);}
    else {gl.uniform3f(u_material.emissiveColor, 0.1, 0.1, 0.1 );}
    cube.render();
    gl.uniform3f( u_material.emissiveColor, 0, 0, 0 );
    popMatrix();
    pushMatrix(); 
    mat4.translate(modelview,modelview,[0,1.5,0]);
    mat4.scale(modelview,modelview,[0.15,0.15,0.15]);
    if (!daytime) {setLightPosition(u_lights[1].position, modelview, [0,0,0,1]);gl.uniform3f( u_material.emissiveColor, 0.5, 0.5, 0 );}
    cube.render();
    gl.uniform3f( u_material.emissiveColor, 0, 0, 0 );
    popMatrix();
    if (daytime) {gl.uniform1f( u_lights[2].enabled, 0 );gl.uniform1f( u_lights[3].enabled, 0 );}
    else {gl.uniform1f( u_lights[2].enabled, 1 );gl.uniform1f( u_lights[3].enabled, 1 );

pushMatrix();
mat4.rotate(modelview,modelview,(-frameNumber)/180*Math.PI,[ 0, 1, 0]);
mat4.translate(modelview,modelview,[0,0.3,4]);
mat4.scale(modelview,modelview,[0.3,0.3,.3]);

pushMatrix();
mat4.translate(modelview,modelview,[-3,0.6,-1]);
mat4.rotateY(modelview,modelview,-Math.PI/12);  
setLightPosition(u_lights[2].position, modelview, [0,0,0,1]);
setSpotlightDirection(u_lights[2].spotDirection, modelview, [-1,0,0]);
popMatrix();
pushMatrix();
mat4.translate(modelview,modelview,[-3,0.6,1]);
mat4.rotateY(modelview,modelview,-Math.PI/12);
setLightPosition(u_lights[3].position, modelview, [0,0,0,1]);
setSpotlightDirection(u_lights[3].spotDirection, modelview, [-1,0,0]);
popMatrix();       
popMatrix();

    }
}
//--------------------------------------------------------------------------------
function other() {
var sin =2*Math.random()*Math.sin(2*Math.PI*Math.random());
var cos =2*Math.random()*Math.sin(2*Math.PI*Math.random());

pushMatrix();
mat4.translate(modelview,modelview,[sin,cos,sin]);
gl.uniform3f( u_material.emissiveColor, cos,sin,cos);
for(var h=10;h>0;h--){mat4.rotateZ(modelview,modelview,Math.PI*(h/100));ring.render();}
popMatrix();

pushMatrix();
mat4.translate(modelview,modelview,[cos,cos,sin]);
gl.uniform3f( u_material.emissiveColor, sin,sin,cos);
for(var h=20;h>0;h--){
mat4.rotateX(modelview,modelview,Math.PI*(h/frameNumber));
mat4.rotateY(modelview,modelview,Math.PI*(h/frameNumber));
mat4.rotateZ(modelview,modelview,Math.PI*(h/frameNumber));
ring.render();}
popMatrix();
}


//--------------------------------------------------------------------------------

function pushMatrix() {matrixStack.push( mat4.clone(modelview) );}
function popMatrix() {modelview = matrixStack.pop();}

//--------------------------------------------------------------------------------

function createModel(modelData, xtraTranslate) {
    var model = {};
    model.coordsBuffer = gl.createBuffer();
    model.normalBuffer = gl.createBuffer();
    model.indexBuffer = gl.createBuffer();
    model.count = modelData.indices.length;
    if (xtraTranslate) model.xtraTranslate = xtraTranslate;
    else model.xtraTranslate = null;
    gl.bindBuffer(gl.ARRAY_BUFFER, model.coordsBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, modelData.vertexPositions, gl.STATIC_DRAW);
    gl.bindBuffer(gl.ARRAY_BUFFER, model.normalBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, modelData.vertexNormals, gl.STATIC_DRAW);
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.indexBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, modelData.indices, gl.STATIC_DRAW);
    model.render = function() { 
        gl.bindBuffer(gl.ARRAY_BUFFER, this.coordsBuffer);
        gl.vertexAttribPointer(a_coords_loc, 3, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, this.normalBuffer);
        gl.vertexAttribPointer(a_normal_loc, 3, gl.FLOAT, false, 0, 0);
        gl.uniform4fv(u_material.diffuseColor, currentColor);
        if (this.xtraTranslate) {pushMatrix();mat4.translate(modelview,modelview,this.xtraTranslate);}
        gl.uniformMatrix4fv(u_modelview, false, modelview );
        mat3.normalFromMat4(normalMatrix, modelview);
        gl.uniformMatrix3fv(u_normalMatrix, false, normalMatrix);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        gl.drawElements(gl.TRIANGLES, this.count, gl.UNSIGNED_SHORT, 0);
        if (this.xtraTranslate) {
            popMatrix();}
    }
    return model;
}

//--------------------------------------------------------------------------------

function createProgram(gl, vertexShaderID, fragmentShaderID) {
    function getTextContent( elementID ) {
var element = document.getElementById(elementID);
var node = element.firstChild;
var str = "";
while (node) {if (node.nodeType == 3) str += node.textContent;node = node.nextSibling;}
return str;}
    try {
        var vertexShaderSource = getTextContent( vertexShaderID );
        var fragmentShaderSource = getTextContent( fragmentShaderID );
    }
    catch (e) {
        throw "Error: Could not get shader source code from script elements.";
    }
    var vsh = gl.createShader( gl.VERTEX_SHADER );
    gl.shaderSource(vsh,vertexShaderSource);
    gl.compileShader(vsh);
    if ( ! gl.getShaderParameter(vsh, gl.COMPILE_STATUS) ) {
        throw "Error in vertex shader:  " + gl.getShaderInfoLog(vsh);
     }
    var fsh = gl.createShader( gl.FRAGMENT_SHADER );
    gl.shaderSource(fsh, fragmentShaderSource);
    gl.compileShader(fsh);
    if ( ! gl.getShaderParameter(fsh, gl.COMPILE_STATUS) ) {
       throw "Error in fragment shader:  " + gl.getShaderInfoLog(fsh);
    }
    var prog = gl.createProgram();
    gl.attachShader(prog,vsh);
    gl.attachShader(prog, fsh);
    gl.linkProgram(prog);
    if ( ! gl.getProgramParameter( prog, gl.LINK_STATUS) ) {
       throw "Link error in program:  " + gl.getProgramInfoLog(prog);
    }
    return prog;
}

//--------------------------------------------------------------------------------

function initGL() {
    var prog = createProgram(gl,"vshader-source","fshader-source");
    gl.useProgram(prog);
    gl.enable(gl.DEPTH_TEST);

    a_coords_loc =  gl.getAttribLocation(prog, "a_coords");
    a_normal_loc =  gl.getAttribLocation(prog, "a_normal");
    gl.enableVertexAttribArray(a_coords_loc);
    gl.enableVertexAttribArray(a_normal_loc);
    
    u_modelview = gl.getUniformLocation(prog, "modelview");
    u_projection = gl.getUniformLocation(prog, "projection");
    u_normalMatrix =  gl.getUniformLocation(prog, "normalMatrix");
    u_material = {
        diffuseColor: gl.getUniformLocation(prog, "material.diffuseColor"),
        specularColor: gl.getUniformLocation(prog, "material.specularColor"),
        emissiveColor: gl.getUniformLocation(prog, "material.emissiveColor"),
        specularExponent: gl.getUniformLocation(prog, "material.specularExponent")};
    u_lights = new Array(4);
    for (var i = 0; i < 4; i++) {
        u_lights[i] = {
            enabled: gl.getUniformLocation(prog, "lights[" + i + "].enabled"),
            position: gl.getUniformLocation(prog, "lights[" + i + "].position"),
            color: gl.getUniformLocation(prog, "lights[" + i + "].color"),
            spotDirection: gl.getUniformLocation(prog, "lights[" + i + "].spotDirection"),
            spotCosineCutoff: gl.getUniformLocation(prog, "lights[" + i + "].spotCosineCutoff"),
            spotExponent: gl.getUniformLocation(prog, "lights[" + i + "].spotExponent"),
            attenuation: gl.getUniformLocation(prog, "lights[" + i + "].attenuation")
        };
    }
            
    gl.uniform3f( u_material.specularColor, 0.1, 0.1, 0.1 );  
    gl.uniform1f( u_material.specularExponent, 16 );
    gl.uniform3f( u_material.emissiveColor, 0, 0, 0);  

for (var i = 1; i < 4; i++) {
        gl.uniform1i( u_lights[i].enabled, 0 ); 
        gl.uniform4f( u_lights[i].position, 0, 0, 1, 0 );
        gl.uniform1f( u_lights[i].spotCosineCutoff, 0); 
        gl.uniform3f( u_lights[i].spotDirection, 0,0,-1);
        gl.uniform1f( u_lights[i].spotExponent, 5);
        gl.uniform1f( u_lights[i].attenuation, 0);
        gl.uniform3f( u_lights[i].color, 1,1,1 ); }

    gl.uniform1i( u_lights[0].enabled, 1 );   
    gl.uniform4f( u_lights[0].position, 0,0,0,1 ); 
    gl.uniform3f( u_lights[0].color, 0.2,0.2,0.2 );  
    
    gl.uniform1i( u_lights[1].enabled, 1 );  
    
    gl.uniform1f( u_lights[2].spotCosineCutoff, Math.cos(Math.PI/8) );
    gl.uniform1f( u_lights[3].spotCosineCutoff, Math.cos(Math.PI/8) ); 
    gl.uniform3f( u_lights[2].color, 0.5, 0.5, 0.4 );  
    gl.uniform3f( u_lights[3].color, 0.5, 0.5, 0.4 );} 


//--------------------------------------------------------------------------------

var animating = false;

function frame() {
    if (animating) {frameNumber += 1;sunAngle += Math.PI/360;
if (sunAngle > 2*Math.PI) {sunAngle -= 2*Math.PI;}
daytime = sunAngle < Math.PI;draw();requestAnimationFrame(frame);}}

function setAnimating(run) {
if (run != animating) {animating = run;
if (animating)requestAnimationFrame(frame);}
}

//--------------------------------------------------------------------------------

function init() {
    try {
        var canvas = document.getElementById("webglcanvas");
        gl = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
        if ( ! gl ) {throw "Browser does not support WebGL";}}
    catch (e) {
        document.getElementById("message").innerHTML =
            "<p>Sorry, could not get a WebGL graphics context.</p>";
        return;}
    try {initGL();  }
    catch (e) {
        document.getElementById("message").innerHTML =
            "<p>Sorry, could not initialize the WebGL graphics context:" + e + "</p>";
        return;
    }
    document.getElementById("animCheck").checked = false;
    document.getElementById("reset").onclick = function() {
       rotator.setView(17,[0,1,2]);
       frameNumber = 0;
       sunAngle = Math.PI/2;
       daytime = true;
       animating = false;
       document.getElementById("animCheck").checked = false;
       draw();}
    

//Shape-z
torus = createModel(uvTorus(0.5,1,16,8));  
sphere = createModel(uvSphere(1));
cone = createModel(uvCone(),[0,0,.5]);
cylinder = createModel(uvCylinder(),[0,0,.5]);
disk = createModel(uvCylinder(5.5,0.5,64),[0,0,.25]);
ring = createModel(ring(3.3,3.9,6));
cube = createModel(cube());
 
    rotator = new TrackballRotator(canvas,function() {if (!animating)draw();},17,[0,1,2]);draw();}

//--------------------------------------------------------------------------------

</script>
</head>
<body onload="init()">
<h4>CMSC 405 6380 Computer Graphics (2178): Project 4</h4>
 <label><input type="checkbox" id="animCheck" onchange="setAnimating(this.checked)">ANIMATE</label>
<button id="reset">Start Over</button>

<noscript><hr><h3> Supports WebGL?  No.  Does not.</h3><hr></noscript>
</p>
<div>
<canvas width=777 height=777 id="webglcanvas" style="background-color:red"></canvas>
</div>
</body>
</html>

